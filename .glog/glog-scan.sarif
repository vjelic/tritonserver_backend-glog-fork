{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-fb9b5a1c-67d1-4231-9d69-cafe0207a823",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4db43d59-2cd8-4405-ac84-bee470ba31d9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-205dcb68-e775-473f-b531-7476e2709136",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-cd92bc45-287f-4ca6-bc58-52a01171a498",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-642feb66-a03b-4ddc-81b6-20ea557c69d2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6be614ff-1c3b-458a-8fa2-d737386bbe48",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-bda44c41-94e4-4cf4-88c8-84ddf50ac7e0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8839db46-b3da-481b-9c28-83a63f14d10c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-fb9b5a1c-67d1-4231-9d69-cafe0207a823",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/backends/bls/src/bls.cc"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 4,
                  "endLine": 283,
                  "endColumn": 56,
                  "charOffset": 11921,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(output_buffer, output_base, output_byte_size)",
                    "rendered": {
                      "text": "memcpy(output_buffer, output_base, output_byte_size)",
                      "markdown": "`memcpy(output_buffer, output_base, output_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/backends/bls/src/bls.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11921,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output_buffer, <size of output_buffer>,  output_base,  output_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4db43d59-2cd8-4405-ac84-bee470ba31d9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/device_memory_tracker.cc"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 27,
                  "endLine": 71,
                  "endColumn": 56,
                  "charOffset": 3397,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(BUF_SIZE + ALIGN_SIZE)",
                    "rendered": {
                      "text": "malloc(BUF_SIZE + ALIGN_SIZE)",
                      "markdown": "`malloc(BUF_SIZE + ALIGN_SIZE)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/device_memory_tracker.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3397,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-205dcb68-e775-473f-b531-7476e2709136",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/backend_common.cc"
                },
                "region": {
                  "startLine": 1116,
                  "startColumn": 49,
                  "endLine": 1116,
                  "endColumn": 64,
                  "charOffset": 36235,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(\"TYPE_\")",
                    "rendered": {
                      "text": "strlen(\"TYPE_\")",
                      "markdown": "`strlen(\"TYPE_\")`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/backend_common.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 36235,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"TYPE_\", <size of \"TYPE_\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/backend_common.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 36235,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(\"TYPE_\", <size of \"TYPE_\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cd92bc45-287f-4ca6-bc58-52a01171a498",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/backend_common.cc"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 4,
                  "endLine": 705,
                  "endColumn": 31,
                  "charOffset": 24236,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(dst, src, byte_size)",
                    "rendered": {
                      "text": "memcpy(dst, src, byte_size)",
                      "markdown": "`memcpy(dst, src, byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/backend_common.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24236,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-642feb66-a03b-4ddc-81b6-20ea557c69d2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/backend_common.cc"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 6,
                  "endLine": 702,
                  "endColumn": 33,
                  "charOffset": 24191,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(dst, src, byte_size)",
                    "rendered": {
                      "text": "memcpy(dst, src, byte_size)",
                      "markdown": "`memcpy(dst, src, byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/backend_common.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24191,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6be614ff-1c3b-458a-8fa2-d737386bbe48",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/backends/bls/src/bls_utils.cc"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 20,
                  "endLine": 59,
                  "endColumn": 37,
                  "charOffset": 2976,
                  "charLength": 17,
                  "snippet": {
                    "text": "malloc(byte_size)",
                    "rendered": {
                      "text": "malloc(byte_size)",
                      "markdown": "`malloc(byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/backends/bls/src/bls_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2976,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bda44c41-94e4-4cf4-88c8-84ddf50ac7e0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/backend_input_collector.cc"
                },
                "region": {
                  "startLine": 1099,
                  "startColumn": 6,
                  "endLine": 1101,
                  "endColumn": 23,
                  "charOffset": 43665,
                  "charLength": 110,
                  "snippet": {
                    "text": "memcpy(\n          buffer + buffer_offset + idx * batch_1_size, buffer + buffer_offset,\n          batch_1_size)",
                    "rendered": {
                      "text": "memcpy(\n          buffer + buffer_offset + idx * batch_1_size, buffer + buffer_offset,\n          batch_1_size)",
                      "markdown": "`memcpy(\n          buffer + buffer_offset + idx * batch_1_size, buffer + buffer_offset,\n          batch_1_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/backend_input_collector.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 43665,
                        "charLength": 110
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n          buffer + buffer_offset + idx * batch_1_size, <size of \n          buffer + buffer_offset + idx * batch_1_size>,  buffer + buffer_offset, \n          batch_1_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8839db46-b3da-481b-9c28-83a63f14d10c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/backend_common.cc"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 2,
                  "endLine": 66,
                  "endColumn": 71,
                  "charOffset": 2498,
                  "charLength": 69,
                  "snippet": {
                    "text": "memcpy(copy_params->dst_, copy_params->src_, copy_params->byte_size_)",
                    "rendered": {
                      "text": "memcpy(copy_params->dst_, copy_params->src_, copy_params->byte_size_)",
                      "markdown": "`memcpy(copy_params->dst_, copy_params->src_, copy_params->byte_size_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/backend_common.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2498,
                        "charLength": 69
                      },
                      "insertedContent": {
                        "text": "memcpy_s(copy_params->dst_, <size of copy_params->dst_>,  copy_params->src_,  copy_params->byte_size_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}